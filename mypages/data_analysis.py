import streamlit as st
import matplotlib.pyplot as plt
import seaborn as sns

def load():
    st.title("Анализ данных")

    # Создание вкладок
    if 'data' in st.session_state:
        df = st.session_state.data
        tab1, tab2, tab3, tab4 = st.tabs(["Общий анализ", "Полнота данных", "Сбалансированность классов", "Подозрительные значения"])

        with tab1:

            st.write("Статистика по данным:")
            st.write(df.describe())

            # Раздел 1: Общая информация
            st.subheader("Общая структура данных")
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Примеры", "568 630", delta="0", help="Объем выборки")
            with col2:
                st.metric("Признаки", "28", delta="0", help="Технические показатели")
            with col3:
                st.metric("Диапазон", "[0, 1]", delta="Нормализовано", help="Масштабирование данных")

            # Раздел 2: Сумма переводов
            st.subheader("Анализ суммы переводов")
            st.write(
                """
                - **Диапазон**: 50–24 039 USD  
                - **Особенности**: 
                  - Высокая дисперсия 
                  - Необходимость анализа выбросов
                """
            )

            # Раздел 3: Классы
            st.subheader("Классификация")
            class_counts = df["Class"].value_counts(normalize=True).round(2)
            st.write(
                f"""
                - **Количество классов**: 2 
                - **Баланс**: 
                  - Класс 0: {class_counts[0] * 100:.1f}% 
                  - Класс 1: {class_counts[1] * 100:.1f}%
                """
            )

        with tab2:

            # График 1: Heatmap пропущенных значений
            st.header("Анализ полноты данных")
            fig1, ax1 = plt.subplots(figsize=(20, 12))  # Создаем область для графика
            sns_heatmap = sns.heatmap(df.isnull(), yticklabels=False, cbar=False, cmap='viridis')  # Визуализация пропусков
            st.pyplot(fig1)  # Отображение графика

            # Раздел 1: Обзор датасета
            st.subheader("Характеристики набора данных")
            col1, col2 = st.columns(2)
            with col1:
                st.metric("Количество параметров", "30", delta=None,
                          help="Полный список признаков доступен в общем анализе")
            with col2:
                st.metric("Полнота данных", "100%", delta="0 пропусков", help="Достигнута идеальная заполненность")

            # Визуальное подтверждение
            st.success(
                """
                **Важное наблюдение:**  
                График пропущенных значений показывает полное отсутствие пропусков во всех 30 параметрах. 
                Это исключает необходимость в процедурах восстановления данных и снижает риски искажений.
                """
            )

            st.subheader("Почему это важно?")
            st.write(
                """
                - Отсутствие пропусков упрощает этап предобработки
                - Позволяет избежать: 
                  - Смещения моделей из-за неполных данных
                  - Потери информации при удалении строк
                  - Ошибок при заполнении методами восстановления
                """
            )

        with tab3:

            if "Class" in df.columns:
                fig3, ax3 = plt.subplots(figsize=(10, 8))  # Создаем область для графика
                plt.title('Проверка сбалансированности данных', fontsize=16)  # Название графика
                sns.countplot(x='Class', data=df, ax=ax3)  # Построение countplot
                plt.xlabel("Класс (0: Нормальная операция, 1: Мошенническая операция)")
                plt.ylabel("Количество операций")
                st.pyplot(fig3)

                st.subheader("Ключевые характеристики датасета")

                # Отображение метрик
                col1, col2 = st.columns(2)
                with col1:
                    st.metric("Общее количество примеров", "568 630", delta=None, help="Полный объем набора данных")
                with col2:
                    st.metric("Баланс классов", "50/50", delta="Идеальное соотношение",
                              help="Распределение между двумя классами")

                # Визуальное подтверждение
                st.success(
                    """
                    **Важное наблюдение:**  
                    Датасет демонстрирует идеальную сбалансированность классов. 
                    Это снижает риски: 
                    - Смещения модели в сторону доминирующего класса
                    - Необоснованного повышения метрик accuracy
                    """
                )

        with tab4:
            # График 1: Распределение суммы операций (если есть столбец 'amount')
            if "Amount" in df.columns:
                st.subheader("Распределение суммы операций")
                fig2, ax2 = plt.subplots(figsize=(10, 6))
                sns.histplot(df["Amount"], bins=50, kde=True, color='blue')
                plt.xlabel("Сумма операции")
                plt.ylabel("Частота")
                st.pyplot(fig2)

                suspicious_transactions = df[df["Amount"] > df["Amount"].quantile(0.99)]
                st.subheader("Подозрительные операции (верхние 1% по сумме):")
                st.dataframe(suspicious_transactions)

                st.subheader("Анализ распределения сумм операций")

                # Отображение ключевых метрик
                col1, col2 = st.columns(2)
                with col1:
                    st.metric("Минимальная сумма", "50.01 $", delta=None, help="Нижняя граница операций")
                with col2:
                    st.metric("Максимальная сумма", "24 039.93 $", delta=None, help="Верхняя граница операций")

                # Визуальное подтверждение
                st.success(
                    """
                    **Критическое наблюдение:**  
                    Анализ распределения сумм операций не выявил значительных выбросов. 
                    Это означает:
                    - Отсутствие аномальных транзакций
                    - Стабильность статистических характеристик
                    - Готовность данных к моделированию
                    """
                )

                # Научное обоснование
                st.subheader("Практическая значимость")
                st.write(
                    """
                    Отсутствие выбросов позволяет:
                    - Избежать искажений в моделях машинного обучения
                    - Повысить точность статистических выводов
                    - Упростить процесс предобработки данных
                    """
                )

                # Финальный вывод
                st.divider()
                st.subheader("Готовность к анализу")
                st.write(
                    """
                    Данные полностью валидны для:
                    1. Построения прогнозных моделей
                    2. Кластеризации операций
                    3. Аномалий-детектирования
                    """
                )


    else:
        st.write("Пожалуйста, загрузите CSV-файл на вкладке загрузка")